<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:task="http://www.springframework.org/schema/task"  
    xsi:schemaLocation="http://www.springframework.org/schema/context  
                http://www.springframework.org/schema/context/spring-context-3.0.xsd  
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd  
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
                http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">  
    <task:annotation-driven />  
    <bean id="basePropertyPlaceHolder"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"  
        lazy-init="true">  
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />  
        <property name="ignoreResourceNotFound" value="true" />  
        <property name="locations">  
            <list>  
                <value>classpath*:/properties/jdbc.properties</value>  
            </list>  
        </property>  
    </bean>  
  
  
    <!-- mysql configuration -->  
    <!-- <bean id="baseDataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${mysql.driverClassName}" />  
        <property name="url" value="${mysql.url}" />
        <property name="username" value="${mysql.username}" />  
        <property name="password" value="${mysql.password}" />
    </bean>   -->
    
    <bean id="baseDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.username}" />
		<property name="password" value="${mysql.password}" />
		<property name="connectionProperties" value="${mysql.driverClassName}"></property>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="select 1 from dual" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>
    
  
    <!-- Transaction management, use PlatformTransactionManager instead of JtaTransactionManager   
        with jndi -->  
    <bean id="txManagerUser"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="baseDataSource" />  
    </bean>  
    <tx:advice id="txAdvicedrugUser" transaction-manager="txManagerUser">  
        <tx:attributes>  
            <tx:method name="get*" read-only="true" />  
            <tx:method name="*" />  
        </tx:attributes>  
    </tx:advice>  
    <aop:config>  
        <aop:pointcut id="userServiceOperation1"  
            expression="execution(* com.ml.*.service..*Service.*(..)))" />  
        <aop:pointcut id="userServiceOperation2"  
            expression="execution(* com.ml.*.*.service..*Service.*(..)))" />  
    </aop:config>  
  
    <!-- define the SqlSessionFactory -->  
    <bean id="sqlSessionFactoryUser" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="baseDataSource" />  
        <property name="configLocation"  
            value="classpath:config/MyBatis-User-Configuration.xml" />  
    </bean>  
    <!-- DAO Mapper 层 -->  
    <bean id="baseMapperUser" class="org.mybatis.spring.mapper.MapperFactoryBean"  
        abstract="true" lazy-init="true">  
        <property name="sqlSessionFactory" ref="sqlSessionFactoryUser" />  
    </bean>  
    <bean id="userInfoMapper" parent="baseMapperUser">  
        <property name="mapperInterface"  
            value="com.mlf.mapper.UserInfoMapper" />  
    </bean>  
  
  
    <!-- Service层 -->  
    <bean id="userService"  
        class="com.mlf.service.impl.UserServiceImpl">
        <property name="userInfoMapper" ref="userInfoMapper" />
    </bean>  
  
</beans>